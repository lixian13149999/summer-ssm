<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 设置映射的dao类 -->
<mapper namespace="com.bcdbook.summer.system.dao.UserDao">
	<!-- 设置映射的数据模型 -->
	<resultMap id="User" type="com.bcdbook.summer.system.pojo.User">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="del_flag" property="delFlag" jdbcType="INTEGER" />
		
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="pwd" property="pwd" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="real_name" property="realName" jdbcType="VARCHAR" />
		<result column="head_img" property="headImg" jdbcType="VARCHAR" />
		<result column="id_card" property="idCard" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="phone_state" property="phoneState" jdbcType="INTEGER" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="email_state" property="emailState" jdbcType="INTEGER" />
		<result column="open_id" property="openId" jdbcType="VARCHAR" />
		<result column="wechat_state" property="wechatState" jdbcType="INTEGER" />
		<result column="company" property="company" jdbcType="INTEGER" />
		<result column="department" property="department" jdbcType="INTEGER" />
		<result column="position" property="position" jdbcType="INTEGER" />
		<result column="is_lock" property="isLock" jdbcType="INTEGER" />
		
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="create_by" property="createBy" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="update_by" property="updateBy" jdbcType="VARCHAR" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- 用户关联角色的,角色映射模型 -->
	<resultMap id="UserRole" type="com.bcdbook.summer.system.pojo.Role">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="del_flag" property="delFlag" jdbcType="INTEGER" />
		
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="enname" property="enname" jdbcType="VARCHAR" />
		<result column="sort" property="sort" jdbcType="INTEGER" />
		
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="create_by" property="createBy" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="update_by" property="updateBy" jdbcType="VARCHAR" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<!-- 
		<collection column="id" property="childs" select="getChilds" />
		<collection column="id" property="powers" select="getPowers" />
		 -->
	</resultMap>
	
	<!-- 定义查询的所有参数 -->
	<sql id="UserColumns">
		id, del_flag,
		user_name,pwd,nickname,real_name,head_img,id_card,age,gender,phone,phone_state,email,email_state,open_id,wechat_state,company,department,position,is_lock,
		create_time,create_by,update_time,update_by,remark
	</sql>
	<!-- 定义所有条件 -->
	<sql id="UserCondition">
		<where>
	    	<if test="id != null and !&quot;&quot;.equals(id.trim())">
		    	and id = #{id}
		    </if>
		    <if test="true">
		    	and del_flag = 1
		    </if>
		    
		    <if test="userName != null and !&quot;&quot;.equals(userName.trim())">
		    	and user_name = #{userName}
		    </if>
		    <if test="pwd != null and !&quot;&quot;.equals(pwd.trim())">
		    	and pwd = #{pwd}
		    </if>
		    <if test="nickname != null and !&quot;&quot;.equals(nickname.trim())">
		    	and nickname = #{nickname}
		    </if>
		    <if test="realName != null and !&quot;&quot;.equals(realName.trim())">
		    	and real_name = #{realName}
		    </if>
		    <if test="headImg != null and !&quot;&quot;.equals(headImg.trim())">
		    	and head_img = #{headImg}
		    </if>
		    <if test="idCard != null and !&quot;&quot;.equals(idCard.trim())">
		    	and id_card = #{idCard}
		    </if>
		    <if test="age != null and age != 0">
		    	and age = #{age}
		    </if>
		    <if test="gender != null and gender != 0">
		    	and gender = #{gender}
		    </if>
		    <if test="phone != null and !&quot;&quot;.equals(phone.trim())">
		    	and phone = #{phone}
		    </if>
		    <if test="phoneState != null and phoneState != 0">
		    	and phone_state = #{phoneState}
		    </if>
		    <if test="email != null and !&quot;&quot;.equals(email.trim())">
		    	and email = #{email}
		    </if>
		    <if test="emailState != null and emailState != 0">
		    	and email_state = #{emailState}
		    </if>
		    <if test="openId != null and !&quot;&quot;.equals(openId.trim())">
		    	and open_id = #{openId}
		    </if>
		    <if test="wechatState != null and wechatState != 0">
		    	and wechat_state = #{wechatState}
		    </if>
		    <if test="company != null and company != 0">
		    	and company = #{company}
		    </if>
		    <if test="department != null and department != 0">
		    	and department = #{department}
		    </if>
		    <if test="position != null and position != 0">
		    	and position = #{position}
		    </if>
		    <if test="isLock != null and isLock != 0">
		    	and is_lock = #{isLock}
		    </if>
		    
		    <if test="createTime != null and !&quot;&quot;.equals(createTime.trim())">
		    	and create_time = #{createTime}
		    </if>
		    <if test="createBy != null and !&quot;&quot;.equals(createBy.trim())">
		    	and create_by = #{createBy}
		    </if>
		    <if test="updateTime != null and !&quot;&quot;.equals(updateTime.trim())">
		    	and update_time = #{updateTime}
		    </if>
		    <if test="updateBy != null and !&quot;&quot;.equals(updateBy.trim())">
		    	and update_by = #{updateBy}
		    </if>
		    <if test="remark != null and !&quot;&quot;.equals(remark.trim())">
		    	and remark = #{remark}
		    </if>
	    </where>
	</sql>
	<!-- 全局配置结束========end -->
	
	<!-- 添加 -->
	<insert id="insert" useGeneratedKeys="false" keyProperty="id" parameterType="com.bcdbook.summer.system.pojo.User">
		insert into sys_user (id,del_flag,user_name,pwd,nickname,real_name,head_img,id_card,age,gender,phone,phone_state,email,email_state,open_id,wechat_state,company,department,position,is_lock, create_time, create_by, update_time, update_by, remark)
		values (
			#{id,jdbcType=VARCHAR},
			#{delFlag,jdbcType=INTEGER},

			#{userName,jdbcType=VARCHAR},
			#{pwd,jdbcType=VARCHAR},
			#{nickname,jdbcType=VARCHAR},
			#{realName,jdbcType=VARCHAR},
			#{headImg,jdbcType=VARCHAR},
			#{idCard,jdbcType=VARCHAR},
			#{age,jdbcType=INTEGER},
			#{gender,jdbcType=INTEGER},
			#{phone,jdbcType=VARCHAR},
			#{phoneState,jdbcType=INTEGER},
			#{email,jdbcType=VARCHAR},
			#{emailState,jdbcType=INTEGER},
			#{openId,jdbcType=VARCHAR},
			#{wechatState,jdbcType=INTEGER},
			#{company,jdbcType=INTEGER},
			#{department,jdbcType=INTEGER},
			#{position,jdbcType=INTEGER},
			#{isLock,jdbcType=INTEGER},
			
			#{createTime,jdbcType=VARCHAR},
			#{createBy,jdbcType=VARCHAR},
			#{updateTime,jdbcType=VARCHAR},
			#{updateBy,jdbcType=VARCHAR},
			#{remark,jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 伪删除(根据id) -->
	<update id="delete" parameterType="java.lang.String">
		update sys_user
		<set>
			del_flag = 2
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>
	<!-- 伪删除(根据实体类条件) -->
	<update id="deleteByCondition" parameterType="com.bcdbook.summer.system.pojo.User">
		update sys_user
		<set>
			del_flag = 2
		</set>
		<include refid="UserCondition" />
	</update>
	
	<!-- 修改权限 -->
	<update id="update" parameterType="com.bcdbook.summer.system.pojo.User">
		update sys_user
		<set>
		    <if test="delFlag != null and delFlag != 0">
		    	del_flag = #{delFlag},
		    </if>
		    
		    <if test="userName != null and !&quot;&quot;.equals(userName.trim())">
		    	user_name = #{userName},
		    </if>
		    <if test="pwd != null and !&quot;&quot;.equals(pwd.trim())">
		    	pwd = #{pwd},
		    </if>
		    <if test="nickname != null and !&quot;&quot;.equals(nickname.trim())">
		    	nickname = #{nickname},
		    </if>
		    <if test="realName != null and !&quot;&quot;.equals(realName.trim())">
		    	real_name = #{realName},
		    </if>
		    <if test="headImg != null and !&quot;&quot;.equals(headImg.trim())">
		    	head_img = #{headImg},
		    </if>
		    <if test="idCard != null and !&quot;&quot;.equals(idCard.trim())">
		    	id_card = #{idCard},
		    </if>
		    <if test="age != null and age != 0">
		    	age = #{age},
		    </if>
		    <if test="gender != null and gender != 0">
		    	gender = #{gender},
		    </if>
		    <if test="phone != null and !&quot;&quot;.equals(phone.trim())">
		    	phone = #{phone},
		    </if>
		    <if test="phoneState != null and phoneState != 0">
		    	phone_state = #{phoneState},
		    </if>
		    <if test="email != null and !&quot;&quot;.equals(email.trim())">
		    	email = #{email},
		    </if>
		    <if test="emailState != null and emailState != 0">
		    	email_state = #{emailState},
		    </if>
		    <if test="openId != null and !&quot;&quot;.equals(openId.trim())">
		    	open_id = #{openId},
		    </if>
		    <if test="wechatState != null and wechatState != 0">
		    	wechat_state = #{wechatState},
		    </if>
		    <if test="company != null and company != 0">
		    	company = #{company},
		    </if>
		    <if test="department != null and department != 0">
		    	department = #{department},
		    </if>
		    <if test="position != null and position != 0">
		    	position = #{position},
		    </if>
		    <if test="isLock != null and isLock != 0">
		    	is_lock = #{isLock},
		    </if>
		    
		    <if test="createTime != null and !&quot;&quot;.equals(createTime.trim())">
		    	create_time = #{createTime},
		    </if>
		    <if test="createBy != null and !&quot;&quot;.equals(createBy.trim())">
		    	create_by = #{createBy},
		    </if>
		    <if test="updateTime != null and !&quot;&quot;.equals(updateTime.trim())">
		    	update_time = #{updateTime},
		    </if>
		    <if test="updateBy != null and !&quot;&quot;.equals(updateBy.trim())">
		    	update_by = #{updateBy},
		    </if>
		    <if test="remark != null and !&quot;&quot;.equals(remark.trim())">
		    	remark = #{remark},
		    </if>
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>
	
	<!-- 查询(根据id) -->
	<select id="get" resultMap="User" parameterType="java.lang.String">
		select
		<include refid="UserColumns" />
		from sys_user
		where id = #{id,jdbcType=VARCHAR} 
		and del_flag = 1
	</select>
	<!-- 查询(根据实体类条件) -->
	<select id="getByCondition" resultMap="User" parameterType="com.bcdbook.summer.system.pojo.User">
		select
		<include refid="UserColumns" />
		from sys_user
		<include refid="UserCondition" /> 
	</select>
	<!-- 查询(根据实体类条件) -->
	<select id="findList" resultMap="User" parameterType="com.bcdbook.summer.system.pojo.User">
		select
		<include refid="UserColumns" />
		from sys_user
		<include refid="UserCondition" /> 
	    order by update_time
	    <if test="page != null">
	    	LIMIT #{page.lineStart,jdbcType=INTEGER},#{page.pageSize,jdbcType=INTEGER}
	    </if>
	</select>
	<!-- 查询所有数据 -->
	<select id="findAllList" resultMap="User" parameterType="com.bcdbook.summer.system.pojo.User">
		select
		<include refid="UserColumns" />
		from sys_user where 1=1 
		order by update_time
	</select>
	<!-- 根据实体类条件,符合数据的数量 -->
	<select id="count" resultType="java.lang.Integer" parameterType="com.bcdbook.summer.system.pojo.User">
		select count(*) from sys_user
		<include refid="UserCondition" />
	</select>
	
	
	<!-- 关联关系的相关数据操作 -->
	<!-- 添加用户,角色关系 -->
	<insert id="addRole" parameterType="java.util.Map">
		insert into sys_user_role (user_id,role_id)
		values (
			#{userId,jdbcType=VARCHAR},
			#{roleId,jdbcType=VARCHAR}
		)
	</insert>
	<delete id="deleteRole" parameterType="java.util.Map">
		delete from sys_user_role
		where user_id = #{userId,jdbcType=VARCHAR}
		and role_id = #{roleId,jdbcType=VARCHAR}
	</delete>
	<!-- 查询角色,栏目关系 -->
	<select id="getRole" resultType="java.lang.Integer" parameterType="java.util.Map">
		select count(*) from sys_user_role
		where user_id = #{userId,jdbcType=VARCHAR}
		and role_id = #{roleId,jdbcType=VARCHAR}
	</select>
	<!-- 根据角色,查询出与之有关联的栏目的集合 -->
	<select id="listRoleByUser" resultMap="UserRole" parameterType="java.lang.String">
		select r.* 
		from sys_role r
		left join sys_user_role ur 
		on r.id=ur.role_id
		where ur.user_id=#{userId}
		and r.del_flag = 1
	</select>
</mapper>